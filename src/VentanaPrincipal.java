
import java.awt.Color;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Highlighter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author miguel
 */
public class VentanaPrincipal extends javax.swing.JFrame 
{

    /**
     * Creates new form VentanaPrincipal
     */
    File rutaActual; //Esta varible se utiliza para guardar la ruta en la que esta el archivo y poder guardarlo y sobrescribirlo correctamente.
    String textoGuardado = ""; //Esta variable la uso para conseguir mostrar un mensaje si el usuario cierra el programa, recopila el texto del archivo cuando lo guardamos o lo abrimos.
    public VentanaPrincipal() 
    {
        initComponents();
        this.setLocationRelativeTo(null);//Al abrir la ventana la deja a la mitad en vez de en la esquina superior izq.
        this.setIconImage(new ImageIcon(getClass().getResource("/resources/notas.png")).getImage()); //Pongo el icono de la ventana
        this.getContentPane().setBackground(Color.black); 
    }
    
    public void escribeFichero(File ruta)
    //Método con el cual se guarda el texto del archivo en la ruta elegida por el usuario.
    {
        try
        {
            String texto = CuadroTexto.getText();
            BufferedWriter bw = new BufferedWriter(new FileWriter(ruta)); 
            bw.write(texto);
            bw.newLine();
            bw.close();
           
        }
        catch(FileNotFoundException e)
        {
            System.out.println("El archivo no existe: " + e);
        }
        catch(IOException e)
        {
            System.out.println("Ha ocurrido un error: " + e);
        }
        catch(Exception e)
        {
            System.out.println("ERROR: " + e);
        }
    }
    public void leeFichero(File ruta)
    //Metodo con el cual se consigue abrir el archivo, transcribiendo el texto del archivo.
    {
        try
        {
            BufferedReader br = new BufferedReader(new FileReader(ruta));
            CuadroTexto.setText("");
            String linea = br.readLine();
            while(linea != null)
            {
                CuadroTexto.append(linea + "\r\n");
                linea = br.readLine();
            }
            br.close();
        }
        catch(FileNotFoundException ex)
        {
            System.out.println("El archivo no existe: " + ex);
        }
        catch(IOException ex)
        {
            System.out.println("Ha ocurrido un error: " + ex);
        }
        catch(Exception ex)
        {
            System.out.println("ERROR: " + ex);
        }
    }
    public void guardarFichero(java.awt.event.ActionEvent evt)
    //Método que utilizo cuando creo o abro un nuevo archivo, para detectar si tengo que guardar o guardar como dependiendo de si el archivo existe o no.
    {
        if(!textoGuardado.equals(CuadroTexto.getText()))
        {
            int valor = JOptionPane.showConfirmDialog(this,"¿Quieres guardar los cambios?","",JOptionPane.YES_NO_OPTION,JOptionPane.CANCEL_OPTION);
            if(valor == 0)
            {
                if(rutaActual != null)
                {
                    escribeFichero(rutaActual);
                }
                else
                {
                    this.BotonGuardarComoActionPerformed(evt);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        CuadroTexto = new javax.swing.JTextArea();
        jMenuBar = new javax.swing.JMenuBar();
        MenuArchivo = new javax.swing.JMenu();
        BotonNuevo = new javax.swing.JMenuItem();
        BotonAbrir = new javax.swing.JMenuItem();
        BotonGuardar = new javax.swing.JMenuItem();
        BotonGuardarComo = new javax.swing.JMenuItem();
        BotonSalir = new javax.swing.JMenuItem();
        MenuEdicion = new javax.swing.JMenu();
        BotonBuscar = new javax.swing.JMenuItem();
        BotonCopiar = new javax.swing.JMenuItem();
        BotonCortar = new javax.swing.JMenuItem();
        BotonPegar = new javax.swing.JMenuItem();
        BotonSeleccionar = new javax.swing.JMenuItem();
        MenuVer = new javax.swing.JMenu();
        BotonAyuda = new javax.swing.JMenuItem();

        jFileChooser.setCurrentDirectory(new java.io.File("C:\\"));
            jFileChooser.setFileHidingEnabled(false);

            setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
            setTitle("Sin Título*");
            setBackground(new java.awt.Color(0, 0, 0));
            setMinimumSize(new java.awt.Dimension(100, 50));
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    formWindowClosing(evt);
                }
            });

            CuadroTexto.setColumns(20);
            CuadroTexto.setLineWrap(true);
            CuadroTexto.setRows(5);
            CuadroTexto.setMargin(new java.awt.Insets(5, 5, 5, 5));
            jScrollPane2.setViewportView(CuadroTexto);

            jMenuBar.setBackground(new java.awt.Color(0, 0, 0));

            MenuArchivo.setBackground(new java.awt.Color(0, 0, 0));
            MenuArchivo.setForeground(new java.awt.Color(255, 255, 255));
            MenuArchivo.setText("Archivo");
            MenuArchivo.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
            MenuArchivo.setOpaque(true);

            BotonNuevo.setBackground(new java.awt.Color(0, 0, 0));
            BotonNuevo.setForeground(new java.awt.Color(255, 255, 255));
            BotonNuevo.setText("Nuevo");
            BotonNuevo.setOpaque(true);
            BotonNuevo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonNuevoActionPerformed(evt);
                }
            });
            MenuArchivo.add(BotonNuevo);

            BotonAbrir.setBackground(new java.awt.Color(0, 0, 0));
            BotonAbrir.setForeground(new java.awt.Color(255, 255, 255));
            BotonAbrir.setText("Abrir...");
            BotonAbrir.setOpaque(true);
            BotonAbrir.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonAbrirActionPerformed(evt);
                }
            });
            MenuArchivo.add(BotonAbrir);

            BotonGuardar.setBackground(new java.awt.Color(0, 0, 0));
            BotonGuardar.setForeground(new java.awt.Color(255, 255, 255));
            BotonGuardar.setText("Guardar");
            BotonGuardar.setOpaque(true);
            BotonGuardar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonGuardarActionPerformed(evt);
                }
            });
            MenuArchivo.add(BotonGuardar);

            BotonGuardarComo.setBackground(new java.awt.Color(0, 0, 0));
            BotonGuardarComo.setForeground(new java.awt.Color(255, 255, 255));
            BotonGuardarComo.setText("Guardar como...");
            BotonGuardarComo.setOpaque(true);
            BotonGuardarComo.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonGuardarComoActionPerformed(evt);
                }
            });
            MenuArchivo.add(BotonGuardarComo);

            BotonSalir.setBackground(new java.awt.Color(0, 0, 0));
            BotonSalir.setForeground(new java.awt.Color(255, 255, 255));
            BotonSalir.setText("Salir");
            BotonSalir.setOpaque(true);
            BotonSalir.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonSalirActionPerformed(evt);
                }
            });
            MenuArchivo.add(BotonSalir);

            jMenuBar.add(MenuArchivo);

            MenuEdicion.setBackground(new java.awt.Color(0, 0, 0));
            MenuEdicion.setForeground(new java.awt.Color(255, 255, 255));
            MenuEdicion.setText("Edición");
            MenuEdicion.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
            MenuEdicion.setOpaque(true);

            BotonBuscar.setBackground(new java.awt.Color(0, 0, 0));
            BotonBuscar.setForeground(new java.awt.Color(255, 255, 255));
            BotonBuscar.setText("Buscar");
            BotonBuscar.setOpaque(true);
            BotonBuscar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonBuscarActionPerformed(evt);
                }
            });
            MenuEdicion.add(BotonBuscar);

            BotonCopiar.setBackground(new java.awt.Color(0, 0, 0));
            BotonCopiar.setForeground(new java.awt.Color(255, 255, 255));
            BotonCopiar.setText("Copiar");
            BotonCopiar.setOpaque(true);
            BotonCopiar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonCopiarActionPerformed(evt);
                }
            });
            MenuEdicion.add(BotonCopiar);

            BotonCortar.setBackground(new java.awt.Color(0, 0, 0));
            BotonCortar.setForeground(new java.awt.Color(255, 255, 255));
            BotonCortar.setText("Cortar");
            BotonCortar.setOpaque(true);
            BotonCortar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonCortarActionPerformed(evt);
                }
            });
            MenuEdicion.add(BotonCortar);

            BotonPegar.setBackground(new java.awt.Color(0, 0, 0));
            BotonPegar.setForeground(new java.awt.Color(255, 255, 255));
            BotonPegar.setText("Pegar");
            BotonPegar.setOpaque(true);
            BotonPegar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonPegarActionPerformed(evt);
                }
            });
            MenuEdicion.add(BotonPegar);

            BotonSeleccionar.setBackground(new java.awt.Color(0, 0, 0));
            BotonSeleccionar.setForeground(new java.awt.Color(255, 255, 255));
            BotonSeleccionar.setText("Seleccionar Todo");
            BotonSeleccionar.setOpaque(true);
            BotonSeleccionar.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonSeleccionarActionPerformed(evt);
                }
            });
            MenuEdicion.add(BotonSeleccionar);

            jMenuBar.add(MenuEdicion);

            MenuVer.setBackground(new java.awt.Color(0, 0, 0));
            MenuVer.setForeground(new java.awt.Color(255, 255, 255));
            MenuVer.setText("Ayuda");
            MenuVer.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
            MenuVer.setOpaque(true);

            BotonAyuda.setBackground(new java.awt.Color(0, 0, 0));
            BotonAyuda.setForeground(new java.awt.Color(255, 255, 255));
            BotonAyuda.setText("Acerca del programa");
            BotonAyuda.setOpaque(true);
            BotonAyuda.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    BotonAyudaActionPerformed(evt);
                }
            });
            MenuVer.add(BotonAyuda);

            jMenuBar.add(MenuVer);

            setJMenuBar(jMenuBar);

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
                    .addContainerGap())
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void BotonNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNuevoActionPerformed
        guardarFichero(evt);
        CuadroTexto.setText("");
        rutaActual = null;
        this.setTitle("sin Título*");
    }//GEN-LAST:event_BotonNuevoActionPerformed

    private void BotonAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAbrirActionPerformed
        guardarFichero(evt);
        int respuesta = jFileChooser.showOpenDialog(this); //Abro el JFileChooser con el que el usuario podrá abrir un archivo que previamente este creado 
                                                           //para así poder visualizarlo en el bloc de notas
        if(respuesta == JFileChooser.APPROVE_OPTION)
        {
            File file = jFileChooser.getSelectedFile();
            leeFichero(file);
            rutaActual = file;
            textoGuardado = CuadroTexto.getText();
            this.setTitle(file.getName());
        }                   
    }//GEN-LAST:event_BotonAbrirActionPerformed

    private void BotonSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSalirActionPerformed
        guardarFichero(evt);
        System.exit(0);
    }//GEN-LAST:event_BotonSalirActionPerformed

    private void BotonGuardarComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarComoActionPerformed
        textoGuardado = CuadroTexto.getText();
        int respuesta = jFileChooser.showSaveDialog(this);
        if(respuesta == JFileChooser.APPROVE_OPTION) //El usuario puede guardar el archivo en la ruta que seleccione y dandole el nombre que quiera.
        {
            File file = jFileChooser.getSelectedFile();
            if(file.exists())
            {
                int valor = JOptionPane.showConfirmDialog(this,"El archivo ya existe.\n ¿Deseas sobrescribirlo?","",JOptionPane.YES_NO_OPTION,JOptionPane.CANCEL_OPTION);
                if(valor==0)
                {
                    escribeFichero(file);
                    rutaActual = file;
                    this.setTitle(file.getName());
                }
            }
            else
            {
                escribeFichero(file);
                rutaActual = file;
                this.setTitle(file.getName());
            }
        }        
    }//GEN-LAST:event_BotonGuardarComoActionPerformed

    private void BotonGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGuardarActionPerformed
        if(rutaActual != null) //Si el archivo ya esta guardado previamente simplemente se guardarán los cambios, si no lo esta se activará el guardar como.
        {
            escribeFichero(rutaActual);
            textoGuardado = CuadroTexto.getText();
        }
        else
        {
            this.BotonGuardarComoActionPerformed(evt);
        }
    }//GEN-LAST:event_BotonGuardarActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(textoGuardado.equals(CuadroTexto.getText()))//Si el usuario intenta cerrar el programa sin guardar le saltará un mensaje.
        {
            System.exit(0);
        }
        else
        {
            int valor = JOptionPane.showConfirmDialog(this,"¿Deseas salir del programa sin guardar?","",JOptionPane.YES_NO_OPTION,JOptionPane.YES_NO_OPTION);
            if(valor==0)
            {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void BotonBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBuscarActionPerformed
        String texto = CuadroTexto.getText();
        String busqueda = JOptionPane.showInputDialog(CuadroTexto, "Texto a buscar", "");
        Highlighter h = CuadroTexto.getHighlighter();//Clase usada para marcar la palabra seleccionada.
        CuadroTexto.setText(texto);
        if(!busqueda.equals("") && texto.contains(busqueda)) //Cuando el usuario busque una palabra, se buscará por todo el texto y la marcará cuando la encuentre.
        {
            for(int i=0; i < texto.length() - busqueda.length()+1; i++)
            {
                try
                {
                    if(texto.substring(i, i+busqueda.length()).contains(busqueda))
                    {
                        h.addHighlight(i, i+busqueda.length(), DefaultHighlighter.DefaultPainter);
                    }
                }
                catch (BadLocationException ex)
                {
                    Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                catch (Exception ex)
                {
                    System.out.println("ERROR: " + ex);
                }
            }
        }
        else if(!texto.contains(busqueda)) //Si la palabra no se encuentra saltará un mensaje
        {
            JOptionPane.showMessageDialog(null, "La palabra buscada no se encuentra en el texto", "", JOptionPane.NO_OPTION);
        }
    }//GEN-LAST:event_BotonBuscarActionPerformed

    private void BotonAyudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAyudaActionPerformed
        JOptionPane.showMessageDialog(null, "Programa hecho por Miguel Angel", "", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_BotonAyudaActionPerformed

    private void BotonCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCopiarActionPerformed
        String textoCopiado = CuadroTexto.getSelectedText();
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();//Usando esta clase puedo usar el portapapeles de Windows
        StringSelection copia = new StringSelection(textoCopiado);//Guardo el texto seleccionado en el portapapeles
        cb.setContents(copia, copia);
    }//GEN-LAST:event_BotonCopiarActionPerformed

    private void BotonPegarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonPegarActionPerformed
        Clipboard cb = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable textoCopiado = cb.getContents(this);//Saco el texto guardado del portapapeles
        if(textoCopiado.isDataFlavorSupported(DataFlavor.stringFlavor))
        {
            try 
            {
                String textoResultado = (String) textoCopiado.getTransferData(DataFlavor.stringFlavor);//Convierto el texto guardado a string para poderlo pegar
                CuadroTexto.insert(textoResultado, CuadroTexto.getCaretPosition());//Inserto el texto guardado en la posicion del cursor
            } 
            catch (UnsupportedFlavorException ex) 
            {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } 
            catch (IOException ex) 
            {
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_BotonPegarActionPerformed

    private void BotonSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonSeleccionarActionPerformed
        CuadroTexto.selectAll();//Metodo con el cual selecciono todo el texto del TextArea
    }//GEN-LAST:event_BotonSeleccionarActionPerformed

    private void BotonCortarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCortarActionPerformed
        String textoSeleccionado = CuadroTexto.getSelectedText();
        String texto = CuadroTexto.getText();
        this.BotonCopiarActionPerformed(evt);
        if(textoSeleccionado != null)
        {
            int posicion = texto.indexOf(textoSeleccionado);//Guardo la posicion del texto seleccionado para poder eliminarlo
            CuadroTexto.setText(texto.substring(0, posicion)+texto.substring(posicion+textoSeleccionado.length()));
        }
    }//GEN-LAST:event_BotonCortarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem BotonAbrir;
    private javax.swing.JMenuItem BotonAyuda;
    private javax.swing.JMenuItem BotonBuscar;
    private javax.swing.JMenuItem BotonCopiar;
    private javax.swing.JMenuItem BotonCortar;
    private javax.swing.JMenuItem BotonGuardar;
    private javax.swing.JMenuItem BotonGuardarComo;
    private javax.swing.JMenuItem BotonNuevo;
    private javax.swing.JMenuItem BotonPegar;
    private javax.swing.JMenuItem BotonSalir;
    private javax.swing.JMenuItem BotonSeleccionar;
    private javax.swing.JTextArea CuadroTexto;
    private javax.swing.JMenu MenuArchivo;
    private javax.swing.JMenu MenuEdicion;
    private javax.swing.JMenu MenuVer;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
